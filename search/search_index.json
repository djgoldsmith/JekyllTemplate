{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Documentation This is some supporting documentation for the Jekyll template, from the IOC webinar on \"Blogging with Github and Jekyll\" If you use the template feel Free to delete this in your version. It has no impact on the blog itself. And is just used for reference.","title":"Home"},{"location":"#documentation","text":"This is some supporting documentation for the Jekyll template, from the IOC webinar on \"Blogging with Github and Jekyll\" If you use the template feel Free to delete this in your version. It has no impact on the blog itself. And is just used for reference.","title":"Documentation"},{"location":"addingContent/","text":"Adding Content to the Site Lets look at adding some content to the site. Posts The _posts directory is scanned and its contents added to the rendered output. Note Jekyll appears to be quite picky about filenames for posts We need to have the name as [DATE]-[Title].md for it to render Post Structure A Typical post will look something like this. --- layout : post title : \"Hello World\" date : 2020 - 07 - 10 12 : 39 : 12 + 0100 categories : firstpost --- This is our first post . I suppose saying ** Hello World ** is appropriate . ## Saying it in other Languages ``` python def helloWorld (): print ( \"hello world\" ) if __name__ == \"__main__\" : helloWorld () ``` The part surrounded by dashes --- is the post header. This is metadata about the post and is used when rendering. The rest of the content is markdown formatted text You can find an nice markdown primer","title":"Adding Content"},{"location":"addingContent/#adding-content-to-the-site","text":"Lets look at adding some content to the site.","title":"Adding Content to the Site"},{"location":"addingContent/#posts","text":"The _posts directory is scanned and its contents added to the rendered output. Note Jekyll appears to be quite picky about filenames for posts We need to have the name as [DATE]-[Title].md for it to render","title":"Posts"},{"location":"addingContent/#post-structure","text":"A Typical post will look something like this. --- layout : post title : \"Hello World\" date : 2020 - 07 - 10 12 : 39 : 12 + 0100 categories : firstpost --- This is our first post . I suppose saying ** Hello World ** is appropriate . ## Saying it in other Languages ``` python def helloWorld (): print ( \"hello world\" ) if __name__ == \"__main__\" : helloWorld () ``` The part surrounded by dashes --- is the post header. This is metadata about the post and is used when rendering. The rest of the content is markdown formatted text You can find an nice markdown primer","title":"Post Structure"},{"location":"gettingStarted/","text":"Using the template In this article we will go through the process of setting up a new version of the repository, and make our first change to the content. You will need to sign up for a GitHub account. Its free, (as free as any other \"free\" online service is anyway) Getting a copy of the template Our first step is to get a copy of the template. For this we need to create a new repository. This will create a new project on github, for your blog. As we are going to use GitHubs nifty template feature, this is a pretty simple process. Visit https://github.com/djgoldsmith/JekyllTemplate Click the \"Use this Template\" button, and give your blog a name. Info The repository name you choose will be part of the address for the blog. For example. A repo with the name MyBlog will be available at https://<yourname>.github.io/MyBlog Note GitHub also allows us to have ONE \"user\" site. This will have the address http://<yourname>/github.io Changing the repository name to .github.io will activate this. We can also have pages for Organisations, so if you have a group of related projects, there is no excuse not to have documentation. Enabling the Pages Feature We also need to enable the Pages Feature, to make the blog available. Under Settings, there should be a section on Github pages. In this case we can set the source to be the master branch Letting GitHub do its magic Once pages are enabled, GiHub will scan the repository, workout you have a Jekyll blog then create and render the content. The site should now be available. Note It can take a bit of time for pages to update. Usually its pretty fast though. If you are not seeing you changes wait a while then refresh the page. Making our First Change If you view the page you will notice it has no style of formatting. This is because the site needs configuring to have the correct addresses for the Jekyll formatting. We will need to edit the _config.yaml file to provide this information. First we need to get the correct address for the config. This is based on the URL (in the address bar) of the site. For example, if we have the Repository JekyllDemo we get. URL (from browser): https://djgoldsmith.github.io/JekyllDemo/ url https://djgoldsmith.github.io/ baseurl /JekyllDemo/ Editing config.yaml To edit the file we need to open it in the web browser then click the edit button. Change update these lines with the site information baseurl : \"/JekyllDemo\" # the subpath of your site, e.g. /blog url : \"https://djgoldsmith.github.io\" # the base hostname & protocol for your site, e.g. http://example.com We can also update the other site options here. For example the site name and your various contact information. title : IOC Blogging Demo email : my-Email description : >- # this means to ignore newlines until \"baseurl:\" This is a demo of creating blogs with Jekyll and Github pages. We are using it in the Institute Of Coding July Webinars Series. baseurl : \"/JekyllDemo\" # the subpath of your site, e.g. /blog url : \"https://djgoldsmith.github.io/\" # the base hostname & protocol for your site, e.g. http://example.com twitter_username : born2briled github_username : djgoldsmith Committing our changes Finally we need to commit our changes. This will save them along with a commit message that can remind us (or anyone we are working with) what the change was about","title":"Getting Started"},{"location":"gettingStarted/#using-the-template","text":"In this article we will go through the process of setting up a new version of the repository, and make our first change to the content. You will need to sign up for a GitHub account. Its free, (as free as any other \"free\" online service is anyway)","title":"Using the template"},{"location":"gettingStarted/#getting-a-copy-of-the-template","text":"Our first step is to get a copy of the template. For this we need to create a new repository. This will create a new project on github, for your blog. As we are going to use GitHubs nifty template feature, this is a pretty simple process. Visit https://github.com/djgoldsmith/JekyllTemplate Click the \"Use this Template\" button, and give your blog a name. Info The repository name you choose will be part of the address for the blog. For example. A repo with the name MyBlog will be available at https://<yourname>.github.io/MyBlog Note GitHub also allows us to have ONE \"user\" site. This will have the address http://<yourname>/github.io Changing the repository name to .github.io will activate this. We can also have pages for Organisations, so if you have a group of related projects, there is no excuse not to have documentation.","title":"Getting a copy of the template"},{"location":"gettingStarted/#enabling-the-pages-feature","text":"We also need to enable the Pages Feature, to make the blog available. Under Settings, there should be a section on Github pages. In this case we can set the source to be the master branch","title":"Enabling the Pages Feature"},{"location":"gettingStarted/#letting-github-do-its-magic","text":"Once pages are enabled, GiHub will scan the repository, workout you have a Jekyll blog then create and render the content. The site should now be available. Note It can take a bit of time for pages to update. Usually its pretty fast though. If you are not seeing you changes wait a while then refresh the page.","title":"Letting GitHub do its magic"},{"location":"gettingStarted/#making-our-first-change","text":"If you view the page you will notice it has no style of formatting. This is because the site needs configuring to have the correct addresses for the Jekyll formatting. We will need to edit the _config.yaml file to provide this information. First we need to get the correct address for the config. This is based on the URL (in the address bar) of the site. For example, if we have the Repository JekyllDemo we get. URL (from browser): https://djgoldsmith.github.io/JekyllDemo/ url https://djgoldsmith.github.io/ baseurl /JekyllDemo/","title":"Making our First Change"},{"location":"gettingStarted/#editing-configyaml","text":"To edit the file we need to open it in the web browser then click the edit button. Change update these lines with the site information baseurl : \"/JekyllDemo\" # the subpath of your site, e.g. /blog url : \"https://djgoldsmith.github.io\" # the base hostname & protocol for your site, e.g. http://example.com We can also update the other site options here. For example the site name and your various contact information. title : IOC Blogging Demo email : my-Email description : >- # this means to ignore newlines until \"baseurl:\" This is a demo of creating blogs with Jekyll and Github pages. We are using it in the Institute Of Coding July Webinars Series. baseurl : \"/JekyllDemo\" # the subpath of your site, e.g. /blog url : \"https://djgoldsmith.github.io/\" # the base hostname & protocol for your site, e.g. http://example.com twitter_username : born2briled github_username : djgoldsmith","title":"Editing config.yaml"},{"location":"gettingStarted/#committing-our-changes","text":"Finally we need to commit our changes. This will save them along with a commit message that can remind us (or anyone we are working with) what the change was about","title":"Committing our changes"},{"location":"introduction/","text":"Getting Started This template repository allows us to use Jekyll for Blogging with GitHub pages. Static Site Generators In the old days, creating a website would take the following steps. Pick a Hosting company Pick a Publishing framework (for example WordPress) Install whatever framework and supporting software is needed Framework Database Use the frameworks web interface to Create the content. This is one heck of a lot of work for a simple website. A lot of the time we don't need the dded complexity of admin interfaces or databases. Static Site Generators (SSG) were designed to get around this problem. The SSG is a program that takes a collection of input files, and converts them to a complete website. It makes for a simple way of getting text based content online. Benefits of SSG Security. As its all text based there should be nothing to hack. No databases for SQL Injection, or plugins to audit the security of. Speed. As we re note making API calls, and only serving text, it should be fast Flexibly: We can host the site on a very basic web server. No need for plugins or extension Simplicity: No need to deal with complex CMS systems No need for software maintenance of framework We can write in plain text to get the output. On the flip side there are some downsides. We cant really add dynamic content. So things like comment are hard to support without a third party like Disqus Paralysis of Choice: There are so many site generators, choosing one can be a nightmare. Jekyll Jekyll is a Static Site Generator (SSG) written in Ruby. Its pretty easy to use and configure, and offers some nice customisation. Its allow pretty well supported in the \"real world\". One of the great things about Jekyll is it integrates with GitHub Pages. This means we can use GitHub to develop and host the content for us, without having to install any software. GitHub and GitHub Pages While we may think of Git and GitHub for managing code, its actually pretty good at dealing with any text based files. Personally, I have been using it for holding most of my teaching material including: Lecture Notes Lecture Slides Conference Papers Student Dissertations. My own personal blog dan.quixote.codes One of the really nifty features of GitHub is GitHub pages. These allow us to create free static websites for our projects. This is a great feature, as it allows us to write documentation for our projects. But GitHub have also integrated Jekyll, that allows is to write Blogs Note These docs are also hosted using GitHub pages. We are not using Jekyll this time around (but the pretty awesome python based mkdocs project). It gives you an idea of the sort of things we can do. Starting a Jekyll Blog. When it comes to starting a Jekyll blog we have 3 options Install Jekyll, and create a new blog Install Ruby Jump through some hoops to get Jekyll Installed Get working Use a pre made template for the Blog While the first approach is great, and gives you a lot of control over how you develop (and I would recommend it once you get used to things), sometimes getting these things working is more hassle than its worth.","title":"Introduction"},{"location":"introduction/#getting-started","text":"This template repository allows us to use Jekyll for Blogging with GitHub pages.","title":"Getting Started"},{"location":"introduction/#static-site-generators","text":"In the old days, creating a website would take the following steps. Pick a Hosting company Pick a Publishing framework (for example WordPress) Install whatever framework and supporting software is needed Framework Database Use the frameworks web interface to Create the content. This is one heck of a lot of work for a simple website. A lot of the time we don't need the dded complexity of admin interfaces or databases. Static Site Generators (SSG) were designed to get around this problem. The SSG is a program that takes a collection of input files, and converts them to a complete website. It makes for a simple way of getting text based content online.","title":"Static Site Generators"},{"location":"introduction/#benefits-of-ssg","text":"Security. As its all text based there should be nothing to hack. No databases for SQL Injection, or plugins to audit the security of. Speed. As we re note making API calls, and only serving text, it should be fast Flexibly: We can host the site on a very basic web server. No need for plugins or extension Simplicity: No need to deal with complex CMS systems No need for software maintenance of framework We can write in plain text to get the output. On the flip side there are some downsides. We cant really add dynamic content. So things like comment are hard to support without a third party like Disqus Paralysis of Choice: There are so many site generators, choosing one can be a nightmare.","title":"Benefits of SSG"},{"location":"introduction/#jekyll","text":"Jekyll is a Static Site Generator (SSG) written in Ruby. Its pretty easy to use and configure, and offers some nice customisation. Its allow pretty well supported in the \"real world\". One of the great things about Jekyll is it integrates with GitHub Pages. This means we can use GitHub to develop and host the content for us, without having to install any software.","title":"Jekyll"},{"location":"introduction/#github-and-github-pages","text":"While we may think of Git and GitHub for managing code, its actually pretty good at dealing with any text based files. Personally, I have been using it for holding most of my teaching material including: Lecture Notes Lecture Slides Conference Papers Student Dissertations. My own personal blog dan.quixote.codes One of the really nifty features of GitHub is GitHub pages. These allow us to create free static websites for our projects. This is a great feature, as it allows us to write documentation for our projects. But GitHub have also integrated Jekyll, that allows is to write Blogs Note These docs are also hosted using GitHub pages. We are not using Jekyll this time around (but the pretty awesome python based mkdocs project). It gives you an idea of the sort of things we can do.","title":"GitHub and GitHub Pages"},{"location":"introduction/#starting-a-jekyll-blog","text":"When it comes to starting a Jekyll blog we have 3 options Install Jekyll, and create a new blog Install Ruby Jump through some hoops to get Jekyll Installed Get working Use a pre made template for the Blog While the first approach is great, and gives you a lot of control over how you develop (and I would recommend it once you get used to things), sometimes getting these things working is more hassle than its worth.","title":"Starting a Jekyll Blog."},{"location":"localInstall/","text":"Getting Jekyll to run Locally I am afraid the docs are all for Linux at the moment. Prereqs ruby gem dang@dang-laptop ~/Github/IOC/JekyllTemplate$ ruby -v ruby 2.7.1p83 (2020-03-31 revision a0c7c23c9c) [x86_64-linux] dang@dang-laptop ~/Github/IOC/JekyllTemplate$ gem -v 3.1.3 dang@dang-laptop ~/Github/IOC/JekyllTemplate$ Installing everything from Scratch SEupt the Bundler (Optioal) set local Jekyl storeage bundle config set --local path 'vendor/bundle' dang@dang-laptop ~/Github/IOC/JekyllTemplate$ bundle init Writing new Gemfile to /home/dang/Github/IOC/JekyllTemplate/Gemfile Add Jekyll to it dang@dang-laptop ~/Github/IOC/JekyllTemplate$ bundle add jekyll --version 3.8.5 And Create a new Jekyll site. bundle exec jekyll new . --force NOTE: This will overwrite your gitignore.... Update the Gemfile source \"https://rubygems.org\" # Hello ! This is where you manage which Jekyll version is used to run . # When you want to use a different version , change it below , save the # file and run ` bundle install ` . Run Jekyll with ` bundle exec ` , like so : # # bundle exec jekyll serve # # This will help ensure the proper Jekyll version is running . # Happy Jekylling ! # gem \"jekyll\" , \"~> 3.8.5\" # This is the default theme for new Jekyll sites . You may change this to anything you like . gem \"minima\" , \"~> 2.0\" # If you want to use GitHub Pages , remove the \"gem \" jekyll \"\" above and # uncomment the line below . To upgrade , run ` bundle update github - pages ` . gem \"github-pages\" , group : : jekyll_plugins # If you have any plugins , put them here ! group : jekyll_plugins do gem \"jekyll-feed\" , \"~> 0.6\" end # Windows does not include zoneinfo files , so bundle the tzinfo - data gem gem \"tzinfo-data\" , platforms : [: mingw , : mswin , : x64_mingw , : jruby ] # Performance - booster for watching directories on Windows gem \"wdm\" , \"~> 0.1.0\" if Gem . win_platform ? And install the rest of the dependences bundle install Local Development We can now preview the site using ~~~ bundle exec jekyll serve ~~","title":"Working Locally"},{"location":"localInstall/#getting-jekyll-to-run-locally","text":"I am afraid the docs are all for Linux at the moment.","title":"Getting Jekyll to run Locally"},{"location":"localInstall/#prereqs","text":"ruby gem dang@dang-laptop ~/Github/IOC/JekyllTemplate$ ruby -v ruby 2.7.1p83 (2020-03-31 revision a0c7c23c9c) [x86_64-linux] dang@dang-laptop ~/Github/IOC/JekyllTemplate$ gem -v 3.1.3 dang@dang-laptop ~/Github/IOC/JekyllTemplate$","title":"Prereqs"},{"location":"localInstall/#installing-everything-from-scratch","text":"SEupt the Bundler (Optioal) set local Jekyl storeage bundle config set --local path 'vendor/bundle' dang@dang-laptop ~/Github/IOC/JekyllTemplate$ bundle init Writing new Gemfile to /home/dang/Github/IOC/JekyllTemplate/Gemfile Add Jekyll to it dang@dang-laptop ~/Github/IOC/JekyllTemplate$ bundle add jekyll --version 3.8.5 And Create a new Jekyll site. bundle exec jekyll new . --force NOTE: This will overwrite your gitignore.... Update the Gemfile source \"https://rubygems.org\" # Hello ! This is where you manage which Jekyll version is used to run . # When you want to use a different version , change it below , save the # file and run ` bundle install ` . Run Jekyll with ` bundle exec ` , like so : # # bundle exec jekyll serve # # This will help ensure the proper Jekyll version is running . # Happy Jekylling ! # gem \"jekyll\" , \"~> 3.8.5\" # This is the default theme for new Jekyll sites . You may change this to anything you like . gem \"minima\" , \"~> 2.0\" # If you want to use GitHub Pages , remove the \"gem \" jekyll \"\" above and # uncomment the line below . To upgrade , run ` bundle update github - pages ` . gem \"github-pages\" , group : : jekyll_plugins # If you have any plugins , put them here ! group : jekyll_plugins do gem \"jekyll-feed\" , \"~> 0.6\" end # Windows does not include zoneinfo files , so bundle the tzinfo - data gem gem \"tzinfo-data\" , platforms : [: mingw , : mswin , : x64_mingw , : jruby ] # Performance - booster for watching directories on Windows gem \"wdm\" , \"~> 0.1.0\" if Gem . win_platform ? And install the rest of the dependences bundle install","title":"Installing everything from Scratch"},{"location":"localInstall/#local-development","text":"We can now preview the site using ~~~ bundle exec jekyll serve ~~","title":"Local Development"}]}